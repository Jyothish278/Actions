name: Migrate Environment Secrets and Variables

on:
  workflow_dispatch:

jobs:
  migrate:
    runs-on: self-hosted
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Check Python and pip versions
        run: |
          python --version
          pip --version
          
      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
          
      - name: Install Python packages
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install pynacl

      - name: Get Secrets from Source Environment
        id: get-secrets
        run: |
          source_env="${{ vars.SOURCE_ENV }}"
          owner="${{ vars.OWNER }}"
          repo="${{ vars.REPO }}"
          secrets_url="https://api.github.com/repos/$owner/$repo/environments/$source_env/secrets"
          page=1
          total_secrets=0

          while : ; do
            response=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              "$secrets_url?per_page=100&page=$page")

            secrets_count=$(echo "$response" | jq -r '.total_count')

            if [[ "$secrets_count" -gt 0 ]]; then
              total_secrets=$((total_secrets + secrets_count))
              echo "$response" | jq -r '.secrets[] | .name' >> secrets.env
            fi

            if [[ "$secrets_count" -lt 100 ]]; then
              break
            fi
            page=$((page + 1))
          done

          echo "Total secrets fetched: $total_secrets"
          echo "total_secrets=${total_secrets}" >> $GITHUB_ENV

      - name: Validate Secrets Count
        run: |
          expected_secrets_count=$(wc -l < secrets.env)
          echo "Expected secrets count: $expected_secrets_count"
          echo "Fetched secrets count: ${{ env.total_secrets }}"

          if [[ "$expected_secrets_count" -ne "${{ env.total_secrets }}" ]]; then
            echo "Mismatch in fetched secrets count! Expected: ${{ env.total_secrets }}, Found: $expected_secrets_count"
            exit 1
          else
            echo "Secrets count validated successfully."
          fi

      - name: Create Secrets in Destination Environment
        run: |
          source venv/bin/activate
          dest_env="${{ vars.DEST_ENV }}"
          owner="${{ vars.OWNER }}"
          repo="${{ vars.REPO }}"

          key_info=$(curl -s -L \
            -X GET \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/public-key")

          key_id=$(echo "$key_info" | jq -r '.key_id')
          public_key=$(echo "$key_info" | jq -r '.key')

          while IFS= read -r secret_name; do
            placeholder_value="$secret_name"
            encrypted_value=$(python3 encrypt_secret.py "$public_key" "$placeholder_value")

            create_secret_url="https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/$secret_name"
            create_response=$(curl -s -L -X PUT \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"encrypted_value\":\"$encrypted_value\",\"key_id\":\"$key_id\"}" \
              "$create_secret_url")
            
            echo "Successfully created secret '$secret_name'"

          done < secrets.env

      - name: Get Variables from Source Environment
        id: get-vars
        run: |
          source_env="${{ vars.SOURCE_ENV }}"
          owner="${{ vars.OWNER }}"
          repo="${{ vars.REPO }}"
          vars_url="https://api.github.com/repos/$owner/$repo/environments/$source_env/variables"
          page=1
          total_vars=0

          while : ; do
            response=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              "$vars_url?per_page=100&page=$page")

            # Check for errors in the API response
            if [[ $? -ne 0 ]]; then
              echo "Failed to fetch variables from API"
              exit 1
            fi

            # Count how many variables are returned
            vars_count=$(echo "$response" | jq -r '.total_count')

            if [[ "$vars_count" -gt 0 ]]; then
              total_vars=$((total_vars + vars_count))
              echo "$response" | jq -r '.variables[] | "\(.name)=\(.value)"' >> vars.env
            fi

            # Break if there are no more variables
            if [[ "$vars_count" -lt 100 ]]; then
              break
            fi
            page=$((page + 1))
          done

          echo "Total variables fetched: $total_vars"
          echo "total_vars=${total_vars}" >> $GITHUB_ENV


      - name: Validate Variables Count
        run: |
          expected_vars_count=$(wc -l < vars.env)
          echo "Expected variables count: $expected_vars_count"
          echo "Fetched variables count: ${{ env.total_vars }}"

          if [[ "$expected_vars_count" -ne "${{ env.total_vars }}" ]]; then
            echo "Mismatch in fetched variables count! Expected: ${{ env.total_vars }}, Found: $expected_vars_count"
            exit 1
          else
            echo "Variables count validated successfully."
          fi

      - name: Create Variables in Destination Environment
        run: |
          dest_env="${{ vars.DEST_ENV }}"
          owner="${{ vars.OWNER }}"
          repo="${{ vars.REPO }}"

          while IFS='=' read -r var_name var_value; do
            var_name=$(echo "$var_name" | xargs)
            var_value=$(echo "$var_value" | xargs)

            if [[ -z "$var_name" ]]; then
              echo "Skipping empty variable name"
              continue
            fi

            create_var_url="https://api.github.com/repos/$owner/$repo/environments/$dest_env/variables"
            create_response=$(curl -s -L -X POST \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}" \
              "$create_var_url")
            
            echo "Successfully created variable '$var_name'"

          done < vars.env
