name: Migrate Environment Secrets and Variables

on:
  workflow_dispatch:

jobs:
  migrate:
    runs-on: self-hosted
    steps:
      - name: Get Secrets from Source Environment
        id: get-secrets
        run: |
          source_env="test-env"
          owner="Jyothish278"
          repo="Actions"
          response=$(curl -L \
                       -H "Accept: application/vnd.github+json" \
                       -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                       -H "X-GitHub-Api-Version: 2022-11-28" \
                       "https://api.github.com/repos/$owner/$repo/environments/$source_env/secrets")

          echo "$response" | jq -r '.secrets[] | "\(.name)=\(.value)"' > secrets.env
          
      - name: Create Secrets in Destination Environment
        run: |
          dest_env="pilot-env"
          owner="Jyothish278"
          repo="Actions"          
      
          # Get the public key for the destination environment
          key_info=$(curl -L \
            -X GET \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/public-key")
        
          key_id=$(echo "$key_info" | jq -r '.key_id')
          public_key=$(echo "$key_info" | jq -r '.key')
      
          # Create the public key file with proper PEM format
          {
            echo "-----BEGIN PUBLIC KEY-----"
            echo "$public_key" | fold -w 64  # Wrap lines to 64 characters
            echo "-----END PUBLIC KEY-----"
          } > public_key.pem
      
          echo "Public key decoded. Contents:"
          cat public_key.pem
        
          while IFS='=' read -r name value; do
            # Encrypt the value using the public key with pkeyutl
            encrypted_value=$(echo -n "$value" | openssl pkeyutl -encrypt -pubin -inkey public_key.pem | base64 | tr -d '\n')
        
            # Check if the encryption was successful
            if [ -z "$encrypted_value" ]; then
              echo "Encryption failed for secret: $name"
              exit 1
            fi
        
            # Create the secret in the destination environment
            curl -L -X PUT \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"encrypted_value\":\"$encrypted_value\",\"key_id\":\"$key_id\"}" \
              "https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/$name"
          done < secrets.env

          
      - name: Get Variables from Source Environment
        id: get-vars
        run: |
          source_env="test-env"
          owner="Jyothish278"
          repo="Actions"
          response=$(curl -L \
                       -H "Accept: application/vnd.github+json" \
                       -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                       -H "X-GitHub-Api-Version: 2022-11-28" \
                       "https://api.github.com/repos/$owner/$repo/environments/$source_env/variables")

          echo "$response" | jq -r '.variables[] | "\(.name)=\(.value)"' > vars.env

      - name: Create Variables in Destination Environment
        run: |
          dest_env="pilot-env"
          owner="Jyothish278"
          repo="Actions"
          while IFS='=' read -r name value; do
            # Create the variable in the destination environment
            curl -L -X PUT \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"value\":\"$value\"}" \
              "https://api.github.com/repos/$owner/$repo/environments/$dest_env/variables/$name"
          done < vars.env
