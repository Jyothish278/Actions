name: Migrate Environment Secrets and Variables

on:
  workflow_dispatch:

jobs:
  migrate:
    runs-on: self-hosted
    steps:
      - name: Get Secrets from Source Environment
        id: get-secrets
        run: |
          source_env="test-env"
          owner="Jyothish278"
          repo="Actions"
          secrets_url="https://api.github.com/repos/$owner/$repo/environments/$source_env/secrets"

          response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$secrets_url")

          # Handle potential errors during secret retrieval
          if [ $? -ne 0 ]; then
            echo "Error fetching secrets: $response"
            exit 1
          fi

          # Extract names and encrypted values and save them to secrets.env
          echo "$response" | jq -r '.secrets[] | "\(.name)=\(.encrypted_value)"' > secrets.env

      - name: Create Secrets in Destination Environment
        run: |
          dest_env="pilot-env"
          owner="Jyothish278"
          repo="Actions"

          # Create each secret in the destination environment
          while IFS='=' read -r name encrypted_value; do
            # Handle empty value case
            if [[ -z "$encrypted_value" ]]; then
              echo "Skipping secret '$name' due to empty encrypted value"
              continue
            fi

            create_secret_url="https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/$name"
            create_response=$(curl -L -X PUT \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"encrypted_value\":\"$encrypted_value\"}" \
              "$create_secret_url")

            # Handle potential errors during secret creation
            if [ $? -ne 0 ]; then
              echo "Error creating secret '$name': $create_response"
              exit 1
            fi

            echo "Successfully created secret '$name'"
          done < secrets.env

      - name: Get Variables from Source Environment
        id: get-vars
        run: |
          source_env="test-env"
          owner="Jyothish278"  # Correct owner
          repo="Actions"
          vars_url="https://api.github.com/repos/$owner/$repo/environments/$source_env/variables"

          response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$vars_url")

          # Handle potential errors during variable retrieval
          if [ $? -ne 0 ]; then
            echo "Error fetching variables: $response"
            exit 1
          fi

          echo "$response" | jq -r '.[].name + "=" + .[].value' > vars.env

      - name: Create Variables in Destination Environment
        run: |
          dest_env="pilot-env"
          owner="Jyothish278"  # Correct owner
          repo="Actions"

          while IFS='=' read -r name value; do
            create_var_url="https://api.github.com/repos/$owner/$repo/environments/$dest_env/variables/$name"
            create_response=$(curl -L -X PUT \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"value\":\"$value\"}" \
              "$create_var_url")

            # Handle potential errors during variable creation
            if [ $? -ne 0 ]; then
              echo "Error creating variable '$name': $create_response"
              exit 1
            fi

            echo "Successfully created variable '$name'"
          done < vars.env
