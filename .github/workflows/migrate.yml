name: Migrate Environment Secrets and Variables

on:
  workflow_dispatch:

jobs:
  migrate:
    runs-on: self-hosted
    steps:
      - name: Set up Python
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip
          pip3 install pynacl

      - name: Get Secrets from Source Environment
        id: get-secrets
        run: |
          source_env="test-env"
          owner="Jyothish278"
          repo="Actions"
          secrets_url="https://api.github.com/repos/$owner/$repo/environments/$source_env/secrets"

          response=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            "$secrets_url")

          echo "API Response: $response"

          # Check if the response contains secrets
          if [[ "$(echo "$response" | jq -r '.total_count')" -eq 0 ]]; then
            echo "No secrets found in source environment."
            exit 1
          fi

          # Extract secret names to process
          echo "$response" | jq -r '.secrets[] | .name' > secrets.env

      - name: Create Secrets in Destination Environment
        run: |
          dest_env="pilot-env"
          owner="Jyothish278"
          repo="Actions"

          # Get the public key for the destination environment
          key_info=$(curl -s -L \
            -X GET \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$owner/$repo/environments/$dest_env/secrets/public-key")

          key_id=$(echo "$key_info" | jq -r '.key_id')
          public_key=$(echo "$key_info" | jq -r '.key')

          # Create a Python script for encryption
          echo "
import sys
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
    """Encrypt a Unicode string using the public key."""
    public_key = public.PublicKey(public_key.encode('utf-8'), encoding.Base64Encoder())
    sealed_box = public.SealedBox(public_key)
    encrypted = sealed_box.encrypt(secret_value.encode('utf-8'))
    return b64encode(encrypted).decode
